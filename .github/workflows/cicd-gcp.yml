## Default Setting
name: Build and Deploy to GCP

on:
  push:
    branches: []

jobs:
  build:
    name: Build and Deploy to GCP
    # 실행 환경 설정
    runs-on: ubuntu-latest

    # 차례대로 실행
    steps:
      # 작업에서 액세스할 수 있도록 $GITHUB_WORKSPACE에서 저장소를 체크아웃합니다.
      - uses: actions/checkout@v3

      ## open jdk 21 버전 환경 세팅
      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: 21
          distribution: corretto

      # 환경파일 작성 : github에 올리지 못하는 정보의 설정파일을 runner에 삽입
      ## create application-dev.yml
      - name: make application-dev.yml
        run: |
          ## create application-dev.yml
          cd ./src/main/resources
          
          touch ./application-dev.yml
          touch ./application-jwt-dev.yml
          touch ./application-oauth2-dev.yml
          touch ./application-storage-s3.yml
        
          echo "${{ secrets.application_dev }}" >> ./application-dev.yml
          echo "${{ secrets.application_jwt_dev }}" >> ./application-jwt-dev.yml
          echo "${{ secrets.application_oauth2_dev }}" >> ./application-oauth2-dev.yml
          echo "${{ secrets.application_storage_s3 }}" >> ./application-storage-s3.yml

      ## 테스트 코드에도 sotrage-s3 가 필요함!
      - name: make application-storage-s3.yml
        run: |
          cd ./src/test/resources
          touch ./application-storage-s3.yml
          
          echo "${{ secrets.application_storage_s3 }}" >> ./application-storage-s3.yml
          
          cat ./application-storage-s3.yml

        shell: bash
      ## Springboot 프로젝트 빌드
      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Build and Test with Gradle
        run: ./gradlew build bootjar

      # Build
      - name: Docker hub login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_ID }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Docker image build ahd Docker Hub push
        run: |
          docker build -t ${{secrets.DOCKERHUB_ID}}/${{secrets.DOCKERHUB_REPOSITORY}} .
          docker push ${{secrets.DOCKERHUB_ID}}/${{secrets.DOCKERHUB_REPOSITORY}}

      # GCP
      - name: Deploy to Instance
        uses: appleboy/ssh-action@v1.0.0     #가장 최신 버젼 appleboy 사용
        with:
          host: ${{secrets.GCP_HOST}}
          username: ${{secrets.GCP_USERNAME}}
          key: ${{secrets.GCP_KEY}}
          script: |
            sudo docker login -u ${{ secrets.DOCKERHUB_ID }} -p ${{ secrets.DOCKERHUB_PASSWORD }}
            sudo docker pull ${{secrets.DOCKERHUB_ID}}/${{secrets.DOCKERHUB_REPOSITORY}}
            sudo docker rm -f $(docker ps -qa)
            sudo docker-compose up -d
            sudo docker image prune -f

      ## Slack에 cicd 결과 전송
      - name: action-slack
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          author_name: 배포 결과를 알려드려요 # default: 8398a7@action-slack
          fields: repo,message,commit,author,eventName,ref,took
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }} # required
        if: always() # Pick up events even if the job fails or is canceled.
